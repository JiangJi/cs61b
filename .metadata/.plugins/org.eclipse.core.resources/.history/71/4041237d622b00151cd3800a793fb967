import java.io.Serializable;
import java.util.HashMap;
import java.util.HashSet;
import java.io.File;
import java.io.InputStreamReader;
import java.nio.file.Files;
import java.io.IOException;
import java.util.Arrays;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Stack;
import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
public class Gitlet implements Serializable {
    private static final long serialVersionUID = 1L;
    private CommitNode head;
    private int commitID;
    private HashSet<String> stagedFiles;
    private HashSet<String> rmFiles;
    public Gitlet()
    {
 
    }
    private void commit(String msg,boolean isFirst)
    {
        if(!isFirst && stagedFiles.isEmpty() && rmFiles.isEmpty())
        {
            System.out.println("No changes added to the commit.");
            return;
        }
        if(msg.equals("")){
            System.out.println("Please enter a commit message.");
            return;
        }
     
    }
    private void initialize()
    {
        File dir = new File(".gitlet");
        if(!dir.exists())
        {
            dir.mkdir();
            this.commit("initial commit",true);
            
        }else
        {
            System.out.println("A gitlet version control system already exists in the "
                    + "current direcotry.");
        }
    }
    private void addFile(String filename)
    {
        File f = new File(filename);
        if(!f.exists())
        {
            System.out.println("File does not exist");
            return ;
        }
        if(rmFiles.contains(filename))
        {
            rmFiles.contains(filename);
            return ;
        }
        if(head !=null)
        {
            if(fileEquals(f,head.getFile(filename))){
               System.out.println("File has not been modified since the last commit");
               return;
            }
        }
        stagedFiles.add(filename);
    }
    private boolean fileEquals(File file1,File file2)
    {
        if(file1 !=null && file2!=null)
        {
            try{
                byte[] fp1= Files.readAllBytes(file1.toPath());
                byte[] fp2= Files.readAllBytes(file2.toPath());
                return Arrays.equals(fp1,fp2);
            }catch(IOException e)
            {
                System.out.println("Counldn't compare files: "+file1.getName()+" "+
                        file2.getName()+" : "+e);
            }
        }
        return false;
    }
    public void branch(String name)
    {
        if(b2h.containsKey(name))
        {
            System.out.println("A branch with that name already exists");
            
        }else{
            Branch b = new Branch(head,name);
            if(currBranch !=null)
            {
                currBranch.addSubranch(b);
            }else{
                commitTree = b;
            }
            CommitNode c = head;
            b2h.put(name,c);
            if(h2b.containsKey(c))
            {
                h2b.
            }
        }
    }
}
