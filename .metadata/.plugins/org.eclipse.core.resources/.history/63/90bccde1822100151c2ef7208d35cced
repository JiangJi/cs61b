
public class RBTree {
    private static final boolean RED = true;
    private static final boolean BLACK = false;
    private static int cnt = 0;
    private Node root=null;
    class Node
    {
        int val;
        Node left;
        Node right;
        boolean color;
        Node(int val)
        {
            this.val = val;
            this.left = null;
            this.right = null;
            this.color = RED;
        }
        Node(int val,Node left,Node right,boolean color)
        {
            this.val = val;
            this.left = left;
            this.right = right;
            this.color = color;
        }
    }
    private boolean isRed(Node n)
    {
        if(n==null) return false;
        return n.color == RED;
    }
    void put(int val)
    {
        root=put(root,val);
        root.color = BLACK;
    }
    Node put(Node r,int val)
    {
        if(r==null)
        {
            r = new Node(val,null,null,RED);
            return r;
        }
        else
        {
            if(val < r.val){
                r.left = put(r.left,val);
            }
            else if(val >r.val)
            {
                r.right = put(r.right,val);
            }
        }
        if(isRed(r.right) && !isRed(r.left))
        {
            r = leftRotation(r);
        }
        if(isRed(r.left) && isRed(r.left.left))
        {
            r = rightRotation(r);
        }
        if(isRed(r.left) && isRed(r.right)){
           r=flipColor(r);
        }
        return r;
    }
    Node leftRotation(Node r)
    {
        System.out.println("LR");
        Node right = r.right;
        right.color = r.color;
        r.right = right.left;
        right.left = r;
        r.color = RED;
        return right;
    }
    Node rightRotation(Node r)
    {
        System.out.println("RR");
        Node left = r.left;
        left.color = r.color;
        r.left = left.right;
        left.right = r;
        r.color = RED;
        return left;
    }
    Node flipColor(Node r)
    {
        System.out.println("Flip");
        r.left.color = BLACK;
        r.right.color = BLACK;
        r.color = RED;
        return r;
    }
    void visit(Node r)
    {
        if(r!=null)
        {
            visit(r.left);
            System.out.print(r.val+" ");
            visit(r.right);
        }
    }
    void visit()
    {
        visit(root);
    }
    int height(Node r)
    {
        if(r==null)
        {
            return 0;
        }
        return Math.max(height(r.left), height(r.right))+1;
    }
    public int height()
    {
        return height(root);
    }
    public static void main(String[] args)
    {
        RBTree st = new RBTree();
        for(int i=0;i<1000;i++)
        {
            st.put(i);
        }
        System.out.println("The height is"+st.height());
    }
}
