import java.util.concurrent.*;
import java.util.*;
class Accessor implements Runnable
{
    private final int id;
    public Accessor(int idn){ id = idn;}
    public void run()
    {
        while(!Thread.currentThread().isInterrupted())
        {
            ThreadLocalVariable.increment();
            System.out.println(this);
            Thread.yield();
        }
    }
    public  String toString()
        {
            return "#"+id+":"+ThreadLocalVariable.get();
        }
}
public class ThreadLocalVariable
{
    private static ThreadLocal<Integer> value= 
            new ThreadLocal<Integer>(){
        private Random rand = new Random(48);
        protected synchronized Integer initialValue()
        {
            return rand.nextInt(10000);
        }
    };
    public static void increment()
    {
        value.set(value.get()+1);
    }
    public static int get() { return value.get();}
    public static void mani(String[] args) throws Exception
    {
        ExecutorService exec = Executors.newCachedThreadPool();
        for(int i=0;i<5;i++)
        {
            exec.execute(new Accessor(i));
        }
        TimeUnit.SECONDS.sleep(3);
    }
    
}